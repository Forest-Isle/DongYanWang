# Generated by Django 3.2 on 2025-08-17 15:19

import api.models.user
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('joined', 'Joined'), ('followed', 'Followed'), ('liked', 'Liked'), ('commented', 'Commented')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Admissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('content_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], max_length=20, verbose_name='内容类型')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('status', models.IntegerField(choices=[(1, '待审核'), (2, '通过'), (3, '未通过')], default=1, verbose_name='状态')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='招生项目名称')),
                ('application_url', models.URLField(verbose_name='申请官网')),
                ('location', models.CharField(max_length=100, verbose_name='地点')),
                ('organizer', models.CharField(max_length=100, verbose_name='主办单位')),
                ('cover', models.URLField(verbose_name='封面图')),
                ('is_scholarship', models.BooleanField(default=False, verbose_name='是否提供奖学金')),
                ('is_competitive', models.BooleanField(default=True, verbose_name='是否竞争激烈')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='最后更新')),
                ('scholarship_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='奖学金')),
                ('sub_status', models.CharField(choices=[('applying', '申请中'), ('ongoing', '进行中'), ('completed', '已结题'), ('paused', '已暂停')], default='applying', max_length=20, verbose_name='项目状态')),
            ],
            options={
                'verbose_name': '招生信息',
                'verbose_name_plural': '招生信息',
            },
        ),
        migrations.CreateModel(
            name='AdmissionsCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('domestic', '国内招生'), ('international', '国际招生'), ('enterprise', '企业招生'), ('exchange', '交换/联合培养招生')], max_length=50, unique=True, verbose_name='分类名称')),
            ],
            options={
                'verbose_name': '招生分类',
                'verbose_name_plural': '招生分类',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AdmissionsMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(verbose_name='年份')),
                ('duration_weeks', models.PositiveSmallIntegerField(verbose_name='时长(周)')),
                ('acceptance_rate', models.FloatField(verbose_name='录取率')),
                ('participants', models.PositiveIntegerField(verbose_name='参与人数')),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='AdmissionsModerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('chief', '主版主'), ('deputy', '副版主')], max_length=20, verbose_name='职位类型')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否在职')),
            ],
            options={
                'verbose_name': '招生版主',
                'verbose_name_plural': '招生版主',
            },
        ),
        migrations.CreateModel(
            name='AdmissionsPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('post_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], editable=False, max_length=20)),
                ('content', models.TextField(verbose_name='内容')),
                ('content_format', models.CharField(choices=[('md', 'Markdown'), ('html', 'HTML')], default='md', max_length=10, verbose_name='内容格式')),
                ('post_status', models.CharField(choices=[('draft', '草稿'), ('pending', '待审核'), ('published', '已发布'), ('rejected', '已拒绝'), ('archived', '已归档')], default='draft', max_length=10)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('sub_post_type', models.CharField(choices=[('strategy', '申请攻略'), ('experience', '项目体验'), ('question', '问答'), ('resource', '资源分享')], max_length=20, verbose_name='帖子类型')),
                ('is_hot', models.BooleanField(default=False, verbose_name='热门帖子')),
                ('collect_count', models.BigIntegerField(default=0, verbose_name='收藏数')),
                ('recommend_count', models.BigIntegerField(default=0, verbose_name='推荐数')),
                ('comment_count_cache', models.BigIntegerField(default=0, verbose_name='评论数缓存')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='AdmissionsPostAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to='admissions_attachments/%Y/%m/', verbose_name='文件')),
                ('url', models.URLField(blank=True, null=True, verbose_name='外部链接')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='排序权重')),
                ('video_cover', models.ImageField(blank=True, null=True, upload_to='admissions_video_covers/')),
                ('video_duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='视频时长(秒)')),
            ],
            options={
                'verbose_name': '招生帖子附件',
                'verbose_name_plural': '招生帖子附件',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('object_id', models.PositiveIntegerField()),
                ('content', models.TextField(max_length=1000, verbose_name='评论内容')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
                ('depth', models.PositiveSmallIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': '评论',
                'verbose_name_plural': '评论',
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('content_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], max_length=20, verbose_name='内容类型')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('status', models.IntegerField(choices=[(1, '待审核'), (2, '通过'), (3, '未通过')], default=1, verbose_name='状态')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='竞赛名称')),
                ('cover', models.URLField(verbose_name='封面图')),
                ('official_website', models.URLField(verbose_name='竞赛官网')),
                ('organizer', models.CharField(max_length=150, verbose_name='主办单位')),
                ('location', models.CharField(blank=True, default='', max_length=100, verbose_name='地点')),
                ('is_national', models.BooleanField(default=False, verbose_name='是否国家级')),
                ('is_math_contest', models.BooleanField(default=False, verbose_name='是否数学类竞赛')),
                ('is_edu_ministry', models.BooleanField(default=False, verbose_name='是否教育部体系')),
                ('followers', models.PositiveIntegerField(default=0, verbose_name='关注人数')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='最后更新')),
            ],
            options={
                'verbose_name': '竞赛',
                'verbose_name_plural': '竞赛',
            },
        ),
        migrations.CreateModel(
            name='CompetitionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('national', '国家级'), ('provincial', '省级'), ('municipal', '市级'), ('school', '校级'), ('innovation', '创新创业'), ('math', '数学'), ('cs', '计算机/编程'), ('engineering', '工程/电子')], max_length=50, unique=True, verbose_name='分类名称')),
            ],
            options={
                'verbose_name': '竞赛分类',
                'verbose_name_plural': '竞赛分类',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(verbose_name='年份')),
                ('registration_deadline', models.DateField(verbose_name='报名截止')),
                ('avg_duration_days', models.PositiveSmallIntegerField(verbose_name='平均竞赛时长(天)')),
                ('avg_win_rate', models.FloatField(verbose_name='平均获奖率(%)')),
                ('participants', models.PositiveIntegerField(default=0, verbose_name='参赛人数')),
                ('has_bonus', models.BooleanField(default=False, verbose_name='是否有奖金')),
                ('max_bonus', models.PositiveIntegerField(default=0, verbose_name='最高单项奖金(元)')),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionModerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('chief', '主版主'), ('deputy', '副版主')], max_length=20, verbose_name='职位类型')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否在职')),
            ],
            options={
                'verbose_name': '竞赛版主',
                'verbose_name_plural': '竞赛版主',
            },
        ),
        migrations.CreateModel(
            name='CompetitionPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('post_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], editable=False, max_length=20)),
                ('content', models.TextField(verbose_name='内容')),
                ('content_format', models.CharField(choices=[('md', 'Markdown'), ('html', 'HTML')], default='md', max_length=10, verbose_name='内容格式')),
                ('post_status', models.CharField(choices=[('draft', '草稿'), ('pending', '待审核'), ('published', '已发布'), ('rejected', '已拒绝'), ('archived', '已归档')], default='draft', max_length=10)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('sub_post_type', models.CharField(choices=[('strategy', '报名/备赛攻略'), ('experience', '参赛经验'), ('question', '问答'), ('resource', '资料分享')], max_length=20, verbose_name='帖子类型')),
                ('is_hot', models.BooleanField(default=False, verbose_name='热门帖子')),
                ('collect_count', models.BigIntegerField(default=0, verbose_name='收藏数')),
                ('recommend_count', models.BigIntegerField(default=0, verbose_name='推荐数')),
                ('comment_count_cache', models.BigIntegerField(default=0, verbose_name='评论数缓存')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='最后活跃时间')),
            ],
            options={
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionPostAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment_type', models.CharField(choices=[('image', '图片'), ('video', '视频'), ('pdf', 'PDF文档'), ('link', '外部链接')], max_length=10, verbose_name='附件类型')),
                ('file', models.FileField(blank=True, null=True, upload_to='competition_attachments/%Y/%m/')),
                ('url', models.URLField(blank=True, null=True, verbose_name='外部链接')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='描述文字')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='排序权重')),
                ('video_cover', models.ImageField(blank=True, null=True, upload_to='competition_video_covers/')),
                ('video_duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='视频时长(秒)')),
            ],
            options={
                'verbose_name': '竞赛帖子附件',
                'verbose_name_plural': '竞赛帖子附件',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ContentStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('interaction_type', models.CharField(choices=[('like', '点赞'), ('collect', '收藏'), ('share', '分享'), ('report', '举报'), ('view', '浏览')], max_length=10)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': '用户交互',
                'verbose_name_plural': '用户交互',
            },
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('content_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], max_length=20, verbose_name='内容类型')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('status', models.IntegerField(choices=[(1, '待审核'), (2, '通过'), (3, '未通过')], default=1, verbose_name='状态')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='期刊名称')),
                ('issn', models.CharField(max_length=9, unique=True, verbose_name='ISSN号')),
                ('cover', models.URLField(verbose_name='期刊封面')),
                ('publisher', models.CharField(max_length=100, verbose_name='出版商')),
                ('journal_url', models.URLField(verbose_name='期刊官网')),
                ('is_sci', models.BooleanField(default=False, verbose_name='SCI收录')),
                ('is_oa', models.BooleanField(default=False, verbose_name='是否OA期刊')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='最后更新')),
            ],
            options={
                'verbose_name': '学术期刊',
                'verbose_name_plural': '学术期刊',
            },
        ),
        migrations.CreateModel(
            name='JournalCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('cs', '计算机科学'), ('eng', '工程学'), ('med', '医学'), ('bio', '生物学'), ('math', '数学'), ('phy', '物理学'), ('chem', '化学'), ('composite', '综合性期刊'), ('engineering', '工程类期刊')], max_length=50, unique=True, verbose_name='分类名称')),
            ],
            options={
                'verbose_name': '期刊分类',
                'verbose_name_plural': '期刊分类',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='JournalMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(verbose_name='年份')),
                ('impact_factor', models.FloatField(verbose_name='影响因子')),
                ('acceptance_rate', models.FloatField(verbose_name='录用率')),
                ('review_period', models.PositiveSmallIntegerField(verbose_name='审稿周期(天)')),
                ('jcr_division', models.CharField(choices=[('Q1', 'Q1区'), ('Q2', 'Q2区'), ('Q3', 'Q3区'), ('Q4', 'Q4区')], max_length=20, verbose_name='JCR分区')),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='JournalModerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('chief', '主版主'), ('deputy', '副版主')], max_length=20, verbose_name='职位类型')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否在职')),
            ],
            options={
                'verbose_name': '期刊版主',
                'verbose_name_plural': '期刊版主',
            },
        ),
        migrations.CreateModel(
            name='JournalPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('post_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], editable=False, max_length=20)),
                ('content', models.TextField(verbose_name='内容')),
                ('content_format', models.CharField(choices=[('md', 'Markdown'), ('html', 'HTML')], default='md', max_length=10, verbose_name='内容格式')),
                ('post_status', models.CharField(choices=[('draft', '草稿'), ('pending', '待审核'), ('published', '已发布'), ('rejected', '已拒绝'), ('archived', '已归档')], default='draft', max_length=10)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('sub_post_type', models.CharField(choices=[('strategy', '投稿策略'), ('experience', '审稿经验'), ('question', '学术问答'), ('resource', '资源分享')], max_length=20, verbose_name='帖子类型')),
                ('is_hot', models.BooleanField(default=False, verbose_name='热门帖子')),
                ('collect_count', models.BigIntegerField(default=0, verbose_name='收藏数')),
                ('recommend_count', models.BigIntegerField(default=0, verbose_name='推荐数')),
                ('comment_count_cache', models.BigIntegerField(default=0, verbose_name='评论数缓存')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='JournalPostAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to='post_attachments/%Y/%m/', verbose_name='文件')),
                ('url', models.URLField(blank=True, null=True, verbose_name='外部链接')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='排序权重')),
                ('video_cover', models.ImageField(blank=True, null=True, upload_to='video_covers/')),
                ('video_duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='视频时长(秒)')),
            ],
            options={
                'verbose_name': '帖子附件',
                'verbose_name_plural': '帖子附件',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('application', '申请'), ('comment', '评论'), ('like', '点赞'), ('follow', '关注')], max_length=20, verbose_name='类型')),
                ('message', models.CharField(max_length=200, verbose_name='消息')),
                ('read', models.BooleanField(default=False, verbose_name='已读')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='时间')),
                ('object_id', models.PositiveIntegerField(null=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=64)),
                ('ip', models.GenericIPAddressField(blank=True, null=True)),
                ('ua', models.TextField(blank=True)),
                ('request_id', models.CharField(blank=True, max_length=64)),
                ('extra', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('file', models.FileField(upload_to='post_attachments/%Y/%m/')),
                ('file_type', models.CharField(blank=True, max_length=50)),
                ('file_size', models.PositiveIntegerField(help_text='文件大小(字节)')),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('upload_time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '帖子附件',
                'verbose_name_plural': '帖子附件',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('content_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], max_length=20, verbose_name='内容类型')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('status', models.IntegerField(choices=[(1, '待审核'), (2, '通过'), (3, '未通过')], default=1, verbose_name='状态')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='项目名称')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='项目编号')),
                ('cover', models.URLField(blank=True, verbose_name='封面图')),
                ('official_website', models.URLField(blank=True, verbose_name='官方网站')),
                ('application_guide', models.URLField(blank=True, verbose_name='申报/指南链接')),
                ('funding_agency', models.CharField(max_length=100, verbose_name='资助/主管单位')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='项目所属单位/地区')),
                ('is_cooperation', models.BooleanField(default=False, verbose_name='是否合作项目')),
                ('funding_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='立项经费')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='开始日期')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='结束日期')),
                ('sub_status', models.CharField(choices=[('applying', '申请中'), ('ongoing', '进行中'), ('completed', '已结题'), ('paused', '已暂停')], default='applying', max_length=20, verbose_name='项目状态')),
                ('follower_count', models.BigIntegerField(default=0, verbose_name='关注数/收藏数')),
                ('view_count_cache', models.BigIntegerField(default=0, verbose_name='浏览量缓存')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='最后更新')),
            ],
            options={
                'verbose_name': '科研项目',
                'verbose_name_plural': '科研项目',
            },
        ),
        migrations.CreateModel(
            name='ProjectCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='分类名称')),
                ('source', models.CharField(choices=[('nsfc', '国家自然科学基金委'), ('most', '科技部'), ('moe', '教育部'), ('local', '地方科技厅'), ('enterprise', '企业合作'), ('international', '国际合作')], max_length=32, verbose_name='项目来源')),
                ('type', models.CharField(choices=[('key', '重点项目'), ('major', '重大项目'), ('general', '面上项目'), ('youth', '青年基金'), ('platform', '平台/基地'), ('other', '其他')], max_length=32, verbose_name='项目类型')),
            ],
            options={
                'verbose_name': '项目分类',
                'verbose_name_plural': '项目分类',
                'ordering': ['source', 'type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(verbose_name='年份')),
                ('duration_weeks', models.PositiveSmallIntegerField(verbose_name='周期(周)')),
                ('participants', models.PositiveIntegerField(default=0, verbose_name='参与人数')),
                ('budget_spent', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='执行经费(万元)')),
                ('outputs', models.PositiveIntegerField(default=0, verbose_name='阶段产出(论文/专利等数量)')),
            ],
            options={
                'verbose_name': '项目年度指标',
                'verbose_name_plural': '项目年度指标',
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='ProjectModerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('pi', '项目负责人'), ('core', '项目骨干'), ('moderator', '社区版主')], default='moderator', max_length=20, verbose_name='角色')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否在职/有效')),
            ],
            options={
                'verbose_name': '项目角色/版主',
                'verbose_name_plural': '项目角色/版主',
            },
        ),
        migrations.CreateModel(
            name='ProjectPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('post_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], editable=False, max_length=20)),
                ('content', models.TextField(verbose_name='内容')),
                ('content_format', models.CharField(choices=[('md', 'Markdown'), ('html', 'HTML')], default='md', max_length=10, verbose_name='内容格式')),
                ('post_status', models.CharField(choices=[('draft', '草稿'), ('pending', '待审核'), ('published', '已发布'), ('rejected', '已拒绝'), ('archived', '已归档')], default='draft', max_length=10)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('sub_post_type', models.CharField(choices=[('strategy', '申报/管理攻略'), ('experience', '经验分享'), ('question', '问答'), ('resource', '资源分享')], max_length=20, verbose_name='帖子类型')),
                ('is_hot', models.BooleanField(default=False, verbose_name='热门')),
                ('collect_count', models.BigIntegerField(default=0, verbose_name='收藏数')),
                ('recommend_count', models.BigIntegerField(default=0, verbose_name='推荐数')),
                ('comment_count_cache', models.BigIntegerField(default=0, verbose_name='评论数缓存')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='最后活跃时间')),
            ],
            options={
                'verbose_name': '项目帖子',
                'verbose_name_plural': '项目帖子',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='ProjectPostAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to='project_attachments/%Y/%m/', verbose_name='文件')),
                ('url', models.URLField(blank=True, null=True, verbose_name='外部链接')),
                ('attachment_type', models.CharField(choices=[('image', '图片'), ('video', '视频'), ('pdf', 'PDF文档'), ('doc', 'Office文档'), ('link', '外部链接')], max_length=10, verbose_name='附件类型')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='描述')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='排序')),
                ('video_cover', models.ImageField(blank=True, null=True, upload_to='project_video_covers/', verbose_name='视频封面')),
                ('video_duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='视频时长(秒)')),
            ],
            options={
                'verbose_name': '项目帖子附件',
                'verbose_name_plural': '项目帖子附件',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('content_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], max_length=20, verbose_name='内容类型')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('status', models.IntegerField(choices=[(1, '待审核'), (2, '通过'), (3, '未通过')], default=1, verbose_name='状态')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='技能名称')),
                ('cover', models.URLField(blank=True, null=True, verbose_name='封面图')),
                ('skill_type', models.CharField(choices=[('software', '软件'), ('method', '方法'), ('device', '设备')], max_length=20, verbose_name='技能类型')),
                ('difficulty', models.CharField(choices=[('beginner', '入门'), ('intermediate', '中级'), ('advanced', '高级')], max_length=20, verbose_name='难度')),
                ('description', models.TextField(blank=True, verbose_name='简介')),
                ('view_count', models.BigIntegerField(default=0, verbose_name='浏览数')),
                ('followers', models.BigIntegerField(default=0, verbose_name='关注人数')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='最后更新')),
                ('is_hot_top', models.BooleanField(default=False, verbose_name='置顶热门')),
                ('is_general_software', models.BooleanField(default=False, verbose_name='是否通用软件')),
                ('is_recommended', models.BooleanField(default=False, verbose_name='是否推荐')),
            ],
            options={
                'verbose_name': '技能',
                'verbose_name_plural': '技能',
            },
        ),
        migrations.CreateModel(
            name='SkillCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_type', models.CharField(choices=[('subject', '学科分类'), ('instrument', '仪器类别'), ('academic', '大学学科')], db_index=True, max_length=20, verbose_name='分类类型')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='分类名称')),
                ('skill_count', models.PositiveIntegerField(default=0, verbose_name='技能数缓存')),
                ('popular_count', models.PositiveIntegerField(default=0, verbose_name='热门技能数缓存')),
                ('last_update', models.DateField(default=django.utils.timezone.now, verbose_name='最近更新')),
            ],
            options={
                'verbose_name': '技能分类',
                'verbose_name_plural': '技能分类',
                'ordering': ['category_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SkillModerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('chief', '主版主'), ('deputy', '副版主')], max_length=20, verbose_name='职位类型')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否在职')),
            ],
            options={
                'verbose_name': '技能版主',
                'verbose_name_plural': '技能版主',
            },
        ),
        migrations.CreateModel(
            name='SkillPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('post_type', models.CharField(choices=[('journal', '学术论文'), ('project', '科研项目'), ('competition', '学科竞赛'), ('internship', '实习机会'), ('skill', '科研技巧'), ('admissions', '招生机会')], editable=False, max_length=20)),
                ('content', models.TextField(verbose_name='内容')),
                ('content_format', models.CharField(choices=[('md', 'Markdown'), ('html', 'HTML')], default='md', max_length=10, verbose_name='内容格式')),
                ('post_status', models.CharField(choices=[('draft', '草稿'), ('pending', '待审核'), ('published', '已发布'), ('rejected', '已拒绝'), ('archived', '已归档')], default='draft', max_length=10)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('sub_post_type', models.CharField(choices=[('guide', '使用指南'), ('experience', '使用体验'), ('question', '问答'), ('resource', '资源分享')], max_length=20, verbose_name='帖子类型')),
                ('is_hot', models.BooleanField(default=False, verbose_name='热门帖子')),
                ('collect_count', models.BigIntegerField(default=0, verbose_name='收藏数')),
                ('recommend_count', models.BigIntegerField(default=0, verbose_name='推荐数')),
                ('comment_count_cache', models.BigIntegerField(default=0, verbose_name='评论数缓存')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='SkillPostAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_url', models.URLField()),
                ('file_type', models.CharField(max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='已删除')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='删除时间')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='用户名')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('password', models.CharField(max_length=128, verbose_name='密码')),
                ('phone', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=api.models.user.avatar_upload_to, verbose_name='头像')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to=api.models.user.cover_upload_to, verbose_name='封面图')),
                ('school', models.CharField(blank=True, max_length=100, verbose_name='学校')),
                ('major', models.CharField(blank=True, max_length=80, verbose_name='专业')),
                ('degree', models.CharField(blank=True, max_length=50, verbose_name='学历')),
                ('grade', models.CharField(blank=True, max_length=50, verbose_name='年级')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='所在地')),
                ('bio', models.TextField(blank=True, max_length=100, verbose_name='个人简介')),
                ('status', models.IntegerField(choices=[(1, '激活'), (2, '禁用')], default=1, verbose_name='状态')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('papers_post', models.PositiveIntegerField(default=0, verbose_name='论文帖子数')),
                ('projects_post', models.PositiveIntegerField(default=0, verbose_name='项目帖子数')),
                ('competitions_post', models.PositiveIntegerField(default=0, verbose_name='竞赛帖子数')),
                ('followers', models.PositiveIntegerField(default=0, verbose_name='粉丝数')),
                ('following', models.PositiveIntegerField(default=0, verbose_name='关注数')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='api.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserSocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(max_length=20, verbose_name='平台')),
                ('url', models.URLField(verbose_name='链接')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to='api.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='技能名称')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='api.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='兴趣名称')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interests', to='api.user')),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username', 'password'], name='idx_name_pwd'),
        ),
        migrations.AddField(
            model_name='skillpostattachment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='api.skillpost'),
        ),
        migrations.AddField(
            model_name='skillpost',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='skillpost',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='api.skill'),
        ),
        migrations.AddField(
            model_name='skillmoderator',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderators', to='api.skill'),
        ),
        migrations.AddField(
            model_name='skillmoderator',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='用户'),
        ),
        migrations.AlterUniqueTogether(
            name='skillcategory',
            unique_together={('category_type', 'name')},
        ),
        migrations.AddField(
            model_name='skill',
            name='categories',
            field=models.ManyToManyField(related_name='skills', to='api.SkillCategory', verbose_name='所属分类'),
        ),
        migrations.AddField(
            model_name='projectpostattachment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='api.projectpost'),
        ),
        migrations.AddField(
            model_name='projectpost',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='projectpost',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='api.project', verbose_name='所属项目'),
        ),
        migrations.AddField(
            model_name='projectmoderator',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderators', to='api.project'),
        ),
        migrations.AddField(
            model_name='projectmoderator',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user'),
        ),
        migrations.AddField(
            model_name='projectmetric',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='api.project'),
        ),
        migrations.AddIndex(
            model_name='projectcategory',
            index=models.Index(fields=['source', 'type'], name='api_project_source_d42fa8_idx'),
        ),
        migrations.AddField(
            model_name='project',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='api.projectcategory', verbose_name='所属分类'),
        ),
        migrations.AddField(
            model_name='postattachment',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='operationlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.user'),
        ),
        migrations.AddField(
            model_name='notification',
            name='content_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='api.user'),
        ),
        migrations.AddField(
            model_name='journalpostattachment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='api.journalpost'),
        ),
        migrations.AddField(
            model_name='journalpost',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='journalpost',
            name='journal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='api.journal'),
        ),
        migrations.AddField(
            model_name='journalmoderator',
            name='journal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderators', to='api.journal'),
        ),
        migrations.AddField(
            model_name='journalmoderator',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='journalmetric',
            name='journal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='api.journal'),
        ),
        migrations.AddField(
            model_name='journal',
            name='categories',
            field=models.ManyToManyField(related_name='journals', to='api.JournalCategory', verbose_name='所属分类'),
        ),
        migrations.AddField(
            model_name='interaction',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='interaction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='api.user'),
        ),
        migrations.AddField(
            model_name='follow',
            name='follower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='api.user'),
        ),
        migrations.AddField(
            model_name='follow',
            name='following',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='api.user'),
        ),
        migrations.AddField(
            model_name='contentstats',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='competitionpostattachment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='api.competitionpost'),
        ),
        migrations.AddField(
            model_name='competitionpost',
            name='competition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='api.competition'),
        ),
        migrations.AddField(
            model_name='competitionpost',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='competitionmoderator',
            name='competition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderators', to='api.competition'),
        ),
        migrations.AddField(
            model_name='competitionmoderator',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='competitionmetric',
            name='competition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='api.competition'),
        ),
        migrations.AddField(
            model_name='competition',
            name='categories',
            field=models.ManyToManyField(related_name='competitions', to='api.CompetitionCategory', verbose_name='所属分类'),
        ),
        migrations.AddField(
            model_name='comment',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='root',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='descendants', to='api.comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.user'),
        ),
        migrations.AddField(
            model_name='admissionspostattachment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='api.admissionspost'),
        ),
        migrations.AddField(
            model_name='admissionspost',
            name='admissions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='api.admissions'),
        ),
        migrations.AddField(
            model_name='admissionspost',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='admissionsmoderator',
            name='admissions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderators', to='api.admissions'),
        ),
        migrations.AddField(
            model_name='admissionsmoderator',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='admissionsmetric',
            name='admissions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='api.admissions'),
        ),
        migrations.AddField(
            model_name='admissions',
            name='categories',
            field=models.ManyToManyField(related_name='admissions', to='api.AdmissionsCategory', verbose_name='所属分类'),
        ),
        migrations.AddField(
            model_name='activity',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='activity',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user'),
        ),
        migrations.AlterUniqueTogether(
            name='skillmoderator',
            unique_together={('skill', 'user')},
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['name', 'skill_type'], name='api_skill_name_eddc75_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['is_hot_top'], name='api_skill_is_hot__113c98_idx'),
        ),
        migrations.AddIndex(
            model_name='projectpostattachment',
            index=models.Index(fields=['post', 'order'], name='api_project_post_id_628915_idx'),
        ),
        migrations.AddIndex(
            model_name='projectpost',
            index=models.Index(fields=['project', 'post_type', 'post_status'], name='api_project_project_d1ee46_idx'),
        ),
        migrations.AddIndex(
            model_name='projectpost',
            index=models.Index(fields=['creator', 'post_status'], name='api_project_creator_c6edcf_idx'),
        ),
        migrations.AddIndex(
            model_name='projectpost',
            index=models.Index(fields=['is_hot', '-last_activity'], name='api_project_is_hot_20a917_idx'),
        ),
        migrations.AddIndex(
            model_name='projectmoderator',
            index=models.Index(fields=['project', 'role'], name='api_project_project_741b76_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='projectmoderator',
            unique_together={('project', 'user')},
        ),
        migrations.AddIndex(
            model_name='projectmetric',
            index=models.Index(fields=['project', '-year'], name='api_project_project_1f7dfa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='projectmetric',
            unique_together={('project', 'year')},
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['code'], name='api_project_code_b7111f_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['sub_status'], name='api_project_sub_sta_2272de_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['status', 'start_date'], name='api_project_status_6d6273_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['funding_agency'], name='api_project_funding_d3e884_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['is_cooperation'], name='api_project_is_coop_fe15b5_idx'),
        ),
        migrations.AddIndex(
            model_name='journalpost',
            index=models.Index(fields=['journal', 'sub_post_type', 'post_status'], name='api_journal_journal_dfd28f_idx'),
        ),
        migrations.AddIndex(
            model_name='journalpost',
            index=models.Index(fields=['creator', 'post_status'], name='api_journal_creator_0c79bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='journalmoderator',
            unique_together={('journal', 'user')},
        ),
        migrations.AddIndex(
            model_name='journalmetric',
            index=models.Index(fields=['-year', 'jcr_division'], name='api_journal_year_d71012_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='journalmetric',
            unique_together={('journal', 'year')},
        ),
        migrations.AddIndex(
            model_name='journal',
            index=models.Index(fields=['issn'], name='api_journal_issn_18e14a_idx'),
        ),
        migrations.AddIndex(
            model_name='journal',
            index=models.Index(fields=['is_sci'], name='api_journal_is_sci_478df3_idx'),
        ),
        migrations.AddIndex(
            model_name='interaction',
            index=models.Index(fields=['content_type', 'object_id', 'interaction_type'], name='api_interac_content_df1876_idx'),
        ),
        migrations.AddIndex(
            model_name='interaction',
            index=models.Index(fields=['user', 'interaction_type'], name='api_interac_user_id_3541ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='interaction',
            unique_together={('user', 'content_type', 'object_id', 'interaction_type')},
        ),
        migrations.AlterUniqueTogether(
            name='follow',
            unique_together={('follower', 'following')},
        ),
        migrations.AddIndex(
            model_name='contentstats',
            index=models.Index(fields=['content_type', 'object_id'], name='api_content_content_62601f_idx'),
        ),
        migrations.AddIndex(
            model_name='contentstats',
            index=models.Index(fields=['-view_count'], name='api_content_view_co_3d3c36_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentstats',
            unique_together={('content_type', 'object_id')},
        ),
        migrations.AddIndex(
            model_name='competitionpost',
            index=models.Index(fields=['competition', 'post_type', 'post_status'], name='api_competi_competi_86a33c_idx'),
        ),
        migrations.AddIndex(
            model_name='competitionpost',
            index=models.Index(fields=['creator', 'post_status'], name='api_competi_creator_96dadd_idx'),
        ),
        migrations.AddIndex(
            model_name='competitionpost',
            index=models.Index(fields=['is_hot', 'last_activity'], name='api_competi_is_hot_0a856c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='competitionmoderator',
            unique_together={('competition', 'user')},
        ),
        migrations.AddIndex(
            model_name='competitionmetric',
            index=models.Index(fields=['-year', 'registration_deadline'], name='api_competi_year_c65370_idx'),
        ),
        migrations.AddIndex(
            model_name='competitionmetric',
            index=models.Index(fields=['-year', 'avg_win_rate'], name='api_competi_year_556754_idx'),
        ),
        migrations.AddIndex(
            model_name='competitionmetric',
            index=models.Index(fields=['-year', 'has_bonus', 'max_bonus'], name='api_competi_year_b7bcc2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='competitionmetric',
            unique_together={('competition', 'year')},
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['name'], name='api_competi_name_449acf_idx'),
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['is_national'], name='api_competi_is_nati_35e25b_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['content_type', 'object_id'], name='api_comment_content_e00820_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['root'], name='api_comment_root_id_4c1f95_idx'),
        ),
        migrations.AddIndex(
            model_name='admissionspost',
            index=models.Index(fields=['admissions', 'post_type', 'post_status'], name='api_admissi_admissi_905eab_idx'),
        ),
        migrations.AddIndex(
            model_name='admissionspost',
            index=models.Index(fields=['creator', 'post_status'], name='api_admissi_creator_ed94a3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='admissionsmoderator',
            unique_together={('admissions', 'user')},
        ),
        migrations.AddIndex(
            model_name='admissionsmetric',
            index=models.Index(fields=['-year', 'acceptance_rate'], name='api_admissi_year_7d2640_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='admissionsmetric',
            unique_together={('admissions', 'year')},
        ),
        migrations.AddIndex(
            model_name='admissions',
            index=models.Index(fields=['name', 'sub_status'], name='api_admissi_name_562c6d_idx'),
        ),
        migrations.AddIndex(
            model_name='admissions',
            index=models.Index(fields=['is_scholarship'], name='api_admissi_is_scho_585fc4_idx'),
        ),
    ]
